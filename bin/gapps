#!/usr/bin/env node
var path = require('path');
var program = require('commander');
var pkg = require('../package.json');

var commands = path.join(__dirname, '../lib/commands');

program
  .version(pkg.version);

program
  .command('auth <path/to/client/secret.json>')
  .option('-b, --no-launch-browser',
    'Do not use a local webserver to capture oauth code and instead require copy/paste')
  .option('-p, --port [port]', 'Port to use for webserver')
  .description('Authorize gas to use the Google Drive API')
  .action(function(clientSecretPath, options) {
    require(commands + '/auth')(clientSecretPath, options.launchBrowser)
      .then(function() {
        process.exit(0);
      });
  });

program
  .command('upload')
  .description('Upload back to an Apps Script project in Google Drive. Run from root of project directory')
  .alias('push')
  .action(require(commands + '/upload'));

program
  .command('init <fileId>')
  .option('-s, --subdir [subdir]')
  .option('-o, --overwrite')
  .description('Initialize project. The external Apps Script project must exist.')
  .alias('clone')
  .action(require(commands + '/init'));

program
  .command('download')
  .description('Download copy of current code for Apps Script project.')
  .action(require(commands + '/download').command)

program.parse(process.argv)

var err
if (program.args.length == 0) {
    err = 'No command specified'
} else if (program.args[program.args.length - 1] instanceof program.Command) {
    err = undefined
} else {
    err = 'Bad command specified'
}
if (err) {
    var p = require('process')
    console.error(err)
    program.outputHelp()
    p.exit(2)
}
